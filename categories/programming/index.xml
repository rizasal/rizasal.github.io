<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Riza Sal</title><link>https://rizasal.github.io/categories/programming/</link><description>Recent content in Programming on Riza Sal</description><generator>Hugo</generator><language>en-us</language><copyright>Â© Riza S</copyright><lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://rizasal.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>EXPLAIN-ing the Unexplainable</title><link>https://rizasal.github.io/posts/2023-02-19-postgres-explain/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2023-02-19-postgres-explain/</guid><description>&lt;p>Ever had an SQL query running slow? Is the database really using your index to speed up the query? Using the &lt;code>EXPLAIN&lt;/code> command will allow you to look into the query execution, and figure out how the query is being resolved, and what steps, indexes, tables are used, and any filtering that may take place. This information is called the &lt;code>query plan&lt;/code>. The &lt;code>EXPLAIN&lt;/code> command allows us to view the query plan for any particular query.&lt;/p></description></item><item><title>Actor Concurrency Model, Message Passing and its Guarantees in Erlang/Elixir</title><link>https://rizasal.github.io/posts/2022-07-16-actor-concurrency/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2022-07-16-actor-concurrency/</guid><description>&lt;h2 id="the-concept">The Concept&lt;/h2>
&lt;p>The actor concurrency model is a conceptual model where an actor represents the primitive unit of computation.
An Actor has 3 responsibilities:&lt;/p>
&lt;ul>
&lt;li>Communication&lt;/li>
&lt;li>Storage&lt;/li>
&lt;li>Processing&lt;/li>
&lt;/ul>
&lt;h3 id="communication">Communication&lt;/h3>
&lt;p>A single actor on its own makes no sense. Actors come in systems and communicate with each other using mailboxes. Each actor is associated with an address and everything in the system would be modeled using actors.&lt;/p>
&lt;h3 id="storage">Storage&lt;/h3>
&lt;p>An actor can have a private internal state. Each actor is completely isolated from each other since no actor can access the state of another. They can only communicate using messages.&lt;/p></description></item><item><title>Cleaner flows with Pattern Matching in Elixir</title><link>https://rizasal.github.io/posts/2022-05-19-pattern-match/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2022-05-19-pattern-match/</guid><description>&lt;p>Pattern matching is a powerful feature of most Functional Programming languages and allows for a huge improvement in readability.
At it&amp;rsquo;s core, pattern match in Elixir relies on the match operator, the = sign. It tries to match the right hand side with the left hand side.&lt;/p>
&lt;blockquote>
&lt;p>What difference would this have with the == or the === sign that many other languages have?&lt;/p>
&lt;/blockquote>
&lt;p>The match operator allows you to bind variables in addition to checking for a match. Let&amp;rsquo;s understand this through an example&lt;/p></description></item><item><title>Cross Site Requests Forgery: Comic Tutorial</title><link>https://rizasal.github.io/posts/2021-03-10-csrf/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2021-03-10-csrf/</guid><description>&lt;p>&lt;figure>&lt;img src="https://rizasal.github.io/posts/2021-03-10-csrf/images/1.png" width="100%">
&lt;/figure>

&lt;figure>&lt;img src="https://rizasal.github.io/posts/2021-03-10-csrf/images/2.png" width="100%">
&lt;/figure>

&lt;figure>&lt;img src="https://rizasal.github.io/posts/2021-03-10-csrf/images/3.png" width="100%">
&lt;/figure>
&lt;/p></description></item><item><title>Bloom Filters</title><link>https://rizasal.github.io/posts/2021-02-02-bloom_filter/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2021-02-02-bloom_filter/</guid><description>&lt;p>&lt;figure>&lt;img src="https://rizasal.github.io/posts/2021-02-02-bloom_filter/images/1.png" width="100%">
&lt;/figure>

&lt;figure>&lt;img src="https://rizasal.github.io/posts/2021-02-02-bloom_filter/images/2.png" width="100%">
&lt;/figure>

&lt;figure>&lt;img src="https://rizasal.github.io/posts/2021-02-02-bloom_filter/images/3.png" width="100%">
&lt;/figure>
&lt;/p></description></item><item><title>Representing a Chess Board</title><link>https://rizasal.github.io/posts/2020-08-10-chess/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2020-08-10-chess/</guid><description>&lt;p>Making a game of chess is a daunting task. Especially if it is to be online and multiplayer.
It is not feasible to send the entire board object around and we need a way to send individual piece movements.&lt;/p>
&lt;p>One of the ways to do that is the Forsynth-Edwards Notation aka FEN string. A beautiful way to represent the board in a one line ASCII string. It is widely used to record chess games and start from different initial positions
or even the middle of a game.&lt;/p></description></item></channel></rss>