<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Riza S</title><link>https://rizasal.github.io/categories/programming/</link><description>Recent content in programming on Riza S</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://rizasal.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>EXPLAIN-ing the Unexplainable</title><link>https://rizasal.github.io/posts/2023-02-19-postgres-explain/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2023-02-19-postgres-explain/</guid><description>&lt;img src="https://rizasal.github.io/posts/2023-02-19-postgres-explain/images/postgres.png" alt="Featured image of post EXPLAIN-ing the Unexplainable" />&lt;p>Ever had an SQL query running slow? Is the database really using your index to speed up the query? Using the &lt;code>EXPLAIN&lt;/code> command will allow you to look into the query execution, and figure out how the query is being resolved, and what steps, indexes, tables are used, and any filtering that may take place. This information is called the &lt;code>query plan&lt;/code>. The &lt;code>EXPLAIN&lt;/code> command allows us to view the query plan for any particular query.&lt;/p>
&lt;p>It is helpful to know some of the terms related to storage inside PostgreSQL.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Heap/Heap file:&lt;/strong> Storage area for storing the rows of the table. This is divided
into multiple pages and each page size is by default 8KB. Within each page, there contains a pointer which points to the location of the final data.&lt;/li>
&lt;li>&lt;strong>Index Storage:&lt;/strong> This stores only key values i.e. column values contained by
index.&lt;/li>
&lt;li>&lt;strong>Tuple Identifier (TID):&lt;/strong> A tuple is the internal representation of a row in Postgres. The TID represents where the tuple resides in the storage. The first part is the page number and remaining is the tuple index inside the page.&lt;/li>
&lt;/ul>
&lt;h2 id="stages-of-a-query">Stages of a Query&lt;/h2>
&lt;figure>&lt;img src="images/POSTGRES_QUERY_STAGES.png" width="90%"/>
&lt;/figure>
&lt;p>The Parser creates the &lt;a class="link" href="https://www.postgresql.org/docs/current/parser-stage.html" target="_blank" rel="noopener"
>Parse Tree&lt;/a>, after which the Rewrite system rewrites it in a way which the planner stage can use. The query plan generated by the Planner Stage is a tree of &lt;code>plan_nodes&lt;/code>&lt;/p>
&lt;figure>&lt;img src="images/POSTGRES_QUERY_STAGES%282%29.png" width="70%"/>
&lt;/figure>
&lt;p>A &lt;code>plan node&lt;/code> describes a single step that the database will take to execute the query.&lt;/p>
&lt;p>Each plan node corresponds to a specific operation in the query execution plan, such as scanning a table, joining two tables, or filtering rows based on a condition. Plan nodes are organized into a tree structure, with each node representing a single step in the plan, and child nodes representing the sub-steps that make up that step.&lt;/p>
&lt;h2 id="types-of-plan-nodes">Types of Plan nodes&lt;/h2>
&lt;p>Listing some of the common Node types:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Seq Scan:
&lt;figure>&lt;img src="images/Seq_Scan.jpg" width="60%"/>
&lt;/figure>
A sequential scan of a table. This is the most basic type of plan node and is used when no indexes are available for the query. It scans the entire table, row by row, to find the required data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parallel Scan: Sequential scan, but done in parallel. The number of parallel workers can be configured, to utilize all CPU cores.
&lt;figure>&lt;img src="images/Parallel_Scan.jpg" width="70%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Index Scan: A scan of an index. This plan node is used when an index is available for the query and can be used to speed up the query execution.
&lt;figure>&lt;img src="images/Index_Scan.jpg" width="60%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Index Only Scan: All the data required for the query can be found in the index itself and data from the table is not required.
&lt;figure>&lt;img src="images/Index_Only_Scan.jpg" width="60%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bitmap Index Scan: A scan of a bitmap index. This plan node is used when a bitmap index is available for the query and can be used to speed up the query execution.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bitmap Heap Scan: Used in tandem with Bitmap Index scan. Reads the data from a bitmap and loads the rows. Using a normal index might cause random reads slowing down the query. The bitmap index scan is used to quickly find a set of rows that match a specific condition and the location of the rows on disk are fed into a “bitmap” data structure after which Bitmap heap scan is used to retrieve the data for those rows from the table. Multiple bitmaps can be merged using the bit-wise operations before pulling the data. The parameters used by the planner to calculate random read cost is default set to 4 times to that of a sequential read. The parameter &lt;a class="link" href="[https://postgresqlco.nf/doc/en/param/random_page_cost/]%28https://postgresqlco.nf/doc/en/param/random_page_cost/%29" >random_page_cost&lt;/a> can be tuned according to the system.
&lt;figure>&lt;img src="images/Bitmap_Scan.jpg" width="60%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hash Join: A join operation that uses a hash table. First table is scanned sequentially and a hash table is built on the key that is used for the join. Second table is then sequentially scanned and each row pair is matched using the hash table. Even though the initial overhead is present for building the hash table, the speed of the using the hash table makes up for it. This will be only used if the hash table fits in the memory.
&lt;figure>&lt;img src="images/Hash_Join.jpg" width="60%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nested Loop Join: Used when the query requires joining two tables together and one of the tables is small enough to be stored in memory. Also used when no equality operators are present in the join condition.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Merge Join: Each relation is sorted on the join attributes before the join starts. Then the two relations are scanned in parallel, and matching rows are combined to form join rows. This is usually preferred when the tables are large and hash doesn’t fit in the memory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Aggregate: Calculates aggregate values such as sum, count, average, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Materialize: Used when the query requires intermediate results to be loaded into memory before the node above is executed.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="reading-the-explain-statement">Reading the explain statement&lt;/h2>
&lt;p>An example output of an explain statement&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_data&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">QUERY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PLAN&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-------------------------------------------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Seq&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Scan&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cost00020000">cost=0.00..200.00&lt;/h3>
&lt;p>The first number is the startup cost. It is the time taken for processing before the first row can be fetched. The cost is represented, not in actual time, but in units of &lt;code>disk page fetches&lt;/code>; that is, 1.0 equals one sequential disk page read. It is zero in this example, but if we add a sort operation to the same query,&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">desc&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">QUERY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PLAN&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-------------------------------------------------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Sort&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">690&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">711&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">8280&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Sort&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Seq&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Scan&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">151&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">8280&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The cost at the upper level nodes will be inclusive of the cost of its children.
The &lt;code>Seq Scan&lt;/code> here does not require a startup cost, but the &lt;code>Sort&lt;/code> operation above would require the data be retrieved first from the sequential scan, thus explaining the higher startup cost.&lt;/p>
&lt;p>The second component is the &lt;code>Total Cost&lt;/code> it may take to complete.
The parameters used in calculating these costs can be tuned according to the hardware to ensure that the planner can make the best use of the resources available.&lt;/p>
&lt;h3 id="rows10000">rows=10000&lt;/h3>
&lt;p>This is the estimated rows the plan node will retrieve. It is not the number of rows processed or scanned by the plan node, but more of an estimate of the rows selected after applying any constraints. The top level nodes estimates will be closer to the number of rows actually returned by the query compared to the bottom nodes estimates.&lt;/p>
&lt;h3 id="width300">width=300&lt;/h3>
&lt;p>This is the estimated average width (in bytes) of rows output for the particular plan node&lt;/p></description></item><item><title>Actor Concurrency Model, Message Passing and its Guarantees in Erlang/Elixir</title><link>https://rizasal.github.io/posts/2022-07-16-actor-concurrency/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2022-07-16-actor-concurrency/</guid><description>&lt;img src="https://rizasal.github.io/posts/2022-07-16-actor-concurrency/images/Erlang_logo.jpeg" alt="Featured image of post Actor Concurrency Model, Message Passing and its Guarantees in Erlang/Elixir" />&lt;h2 id="the-concept">The Concept&lt;/h2>
&lt;p>The actor concurrency model is a conceptual model where an actor represents the primitive unit of computation.
An Actor has 3 responsibilities:&lt;/p>
&lt;ul>
&lt;li>Communication&lt;/li>
&lt;li>Storage&lt;/li>
&lt;li>Processing&lt;/li>
&lt;/ul>
&lt;h3 id="communication">Communication&lt;/h3>
&lt;p>A single actor on its own makes no sense. Actors come in systems and communicate with each other using mailboxes. Each actor is associated with an address and everything in the system would be modeled using actors.&lt;/p>
&lt;h3 id="storage">Storage&lt;/h3>
&lt;p>An actor can have a private internal state. Each actor is completely isolated from each other since no actor can access the state of another. They can only communicate using messages.&lt;/p>
&lt;h3 id="processing">Processing&lt;/h3>
&lt;p>An actor is allowed to do 3 things upon recieving a message&lt;/p>
&lt;ul>
&lt;li>Create more actors&lt;/li>
&lt;li>Send messages to other actors&lt;/li>
&lt;li>Setting the state for the next message&lt;/li>
&lt;/ul>
&lt;p>An example of an actor designating the state for the next message could be incrementing a counter on each message. Each message will be processed synchronously, and in the conceptual model, there is no guarantee on the ordering of messages.&lt;/p>
&lt;p>The actor models falls nicely into a distributed system, as they are completely isolated and the messages can be passed across machines, via adresses.&lt;/p>
&lt;p>Every message will be delivered utmost only once. The delivery of the message itself can be considered as &amp;ldquo;best efforts&amp;rdquo;. Everything else including how the the processes will communicate etc, is left out to the implementors. Let&amp;rsquo;s take a look at Erlang, which is modeled on the concept.&lt;/p>
&lt;h2 id="erlangelixir">Erlang/Elixir&lt;/h2>
&lt;p>&lt;code>&amp;quot;Message passing starts with a Process Identifier. If it exists, the message is inserted into its signal queue. The messages are always copied.&amp;quot;&lt;/code>
&lt;a class="link" href="https://www.erlang.org/blog/message-passing/" target="_blank" rel="noopener"
>🔗&lt;/a>&lt;/p>
&lt;p>Erlang implements the actor concurrency model, and it&amp;rsquo;s worth looking into the message passing guarantees that it gives.&lt;/p>
&lt;ul>
&lt;li>Signals between two processes are guaranteed to arrive in the order they were sent.&lt;/li>
&lt;/ul>
&lt;p>This process is not the same as an operating system process. In Erlang, processes are lightweight and can be considered as actors
It is important to note that if more than one process sends signals to a common process they can arrive in any order.&lt;/p>
&lt;p>Consider the following scenario:&lt;/p>
&lt;ul>
&lt;li>Process A sends &lt;code>[1,2,3]&lt;/code> to Common Process C.&lt;/li>
&lt;li>Process B sends &lt;code>[4,5,6]&lt;/code> to Common Process C.&lt;/li>
&lt;/ul>
&lt;p>The messages may be recieved by C as &lt;code>[1,2,4,5,6,3]&lt;/code>. The messages sent from A to C will arrive in order they were sent.&lt;/p>
&lt;p>&lt;code>if an entity sends multiple signals to the same destination entity, the order is preserved; that is, if A sends a signal S1 to B, and later sends signal S2 to B, S1 is guaranteed not to arrive after S2. Note that S1 may, or may not have been lost.&lt;/code> &lt;a class="link" href="https://www.erlang.org/doc/reference_manual/processes.html#signal-delivery" target="_blank" rel="noopener"
>🔗&lt;/a>&lt;/p>
&lt;p>The actual delivery of a message is not guaranteed, &lt;a class="link" href="https://www.erlang.org/faq/academic.html#idm1231" target="_blank" rel="noopener"
>only the order is&lt;/a>.&lt;/p>
&lt;h2 id="implications">Implications&lt;/h2>
&lt;h3 id="fault-tolerance">Fault Tolerance&lt;/h3>
&lt;p>Processes are completely isolated. One process going down does not affect any other part of the system since there is no shared state amongst any of them.
Instead of trying to program defensively and trying to handle every single fault that could happen, we let the process crash, and let a supervising process know what happened.&lt;/p>
&lt;p>The supervisor is responsible for knowing what to do when the process crashes, and can restart the process with known state, or handle the failure with grace.
A supervisor itself may be supervised and this can go up all the way.&lt;/p>
&lt;h3 id="distributed-systems">Distributed Systems&lt;/h3>
&lt;p>Since processes are completely isolated, it does not matter where the processes live, and could be distributed across networks. A process only needs to know the address it needs to send to, and everything else works the same.&lt;/p>
&lt;h3 id="deadlocks">Deadlocks&lt;/h3>
&lt;p>The actor model can still cause deadlocks. Process A and B can end up both waiting for messages from each other, creating a deadlock. Even though this is rare, one should keep this in mind when designing systems.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.youtube.com/watch?v=7erJ1DV_Tlo" target="_blank" rel="noopener"
>https://www.youtube.com/watch?v=7erJ1DV_Tlo&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.brianstorti.com/the-actor-model/" target="_blank" rel="noopener"
>https://www.brianstorti.com/the-actor-model/&lt;/a>&lt;/li>
&lt;li>Interesting Read: &lt;a class="link" href="https://keunwoo.com/notes/rebooting/" target="_blank" rel="noopener"
>https://keunwoo.com/notes/rebooting/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Cleaner flows with Pattern Matching in Elixir</title><link>https://rizasal.github.io/posts/2022-05-19-pattern-match/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2022-05-19-pattern-match/</guid><description>&lt;img src="https://rizasal.github.io/posts/2022-05-19-pattern-match/images/preview.png" alt="Featured image of post Cleaner flows with Pattern Matching in Elixir" />&lt;p>Pattern matching is a powerful feature of most Functional Programming languages and allows for a huge improvement in readability.
At it&amp;rsquo;s core, pattern match in Elixir relies on the match operator, the = sign. It tries to match the right hand side with the left hand side.&lt;/p>
&lt;blockquote>
&lt;p>What difference would this have with the == or the === sign that many other languages have?&lt;/p>
&lt;/blockquote>
&lt;p>The match operator allows you to bind variables in addition to checking for a match. Let&amp;rsquo;s understand this through an example&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="go">iex(1)&amp;gt; %{ first_name: &amp;#34;smith&amp;#34;, last_name: last_name } = %{ first_name: &amp;#34;smith&amp;#34;, last_name: &amp;#34;john&amp;#34;}
&lt;/span>&lt;span class="go">&lt;/span>&lt;span class="gp">%&lt;/span>&lt;span class="o">{&lt;/span>first_name: &lt;span class="s2">&amp;#34;smith&amp;#34;&lt;/span>, last_name: &lt;span class="s2">&amp;#34;john&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="go">iex(2)&amp;gt; last_name
&lt;/span>&lt;span class="go">&amp;#34;john&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Whenever a variable is present on the LHS of a match expression, the value of the expression will be assigned into the variable. In the above example, it will give a successful match on any name which has the first_name value as &lt;code>smith&lt;/code> and it will bind the last_name (&amp;ldquo;john&amp;rdquo;) in the &lt;code>last_name&lt;/code> variable. If the &lt;code>first_name&lt;/code> does not match &lt;code>smith&lt;/code> , it will raise a MatchError.&lt;/p>
&lt;h2 id="pattern-match-in-function-parameters">Pattern Match in Function Parameters&lt;/h2>
&lt;p>Let&amp;rsquo;s start with an example&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="kd">def&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nc">IO&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;one&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># print(1) =&amp;gt; &amp;#34;one&amp;#34;&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nc">IO&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;two&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># print(2) =&amp;gt; &amp;#34;two&amp;#34;&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_n&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nc">IO&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;noop&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># print(3) =&amp;gt; &amp;#34;noop&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The above example has three implementations defined for print
The overloaded print function will start pattern matching on the arguments with each definition until it finds a match or it would raise a &lt;code>FunctionClauseError&lt;/code>
Functions are matched for parameters from top to bottom in the order of definition&lt;/p>
&lt;p>Looking at a more complicated example,&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="kd">def&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:italics&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;i&amp;gt; &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> &amp;lt;/i&amp;gt;&amp;#34;&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:bold&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;b&amp;gt; &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> &amp;lt;/b&amp;gt;&amp;#34;&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:strikethrough&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;s&amp;gt; &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> &amp;lt;/s&amp;gt;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here the HTML can be transformed to add an italics/bold/strikethrough surrounding it, by
changing the way we call transform with the second argument.&lt;/p>
&lt;p>You could extract variables inside different types such as tuples, maps and lists using pattern matching in function parameters as well&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="kd">def&lt;/span> &lt;span class="n">switcheroo&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">}),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1"># switcheroo({1,2}) =&amp;gt; {2, 1}&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">extract_name&lt;/span>&lt;span class="p">(%{&lt;/span>&lt;span class="ss">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">}),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">name&lt;/span>
&lt;span class="c1"># extract_name(%{name: &amp;#34;john&amp;#34;, ...}) =&amp;gt; &amp;#34;john&amp;#34;&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">extract_head&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">head&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">tail&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">head&lt;/span>
&lt;span class="c1"># extract_head([1,2,3]) =&amp;gt; 1&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">name_ends_with_john?&lt;/span>&lt;span class="p">(%{&lt;/span>&lt;span class="ss">first_name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">first_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">last_name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;john&amp;#34;&lt;/span>&lt;span class="p">}),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">true&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">name_ends_with_john?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">false&lt;/span>
&lt;span class="c1"># name_ends_with_john(%{first_name: &amp;#34;smith&amp;#34;, last_name: &amp;#34;john&amp;#34;}) =&amp;gt; true&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="cleaner-flows-with-pattern-matching">Cleaner flows with Pattern Matching&lt;/h2>
&lt;p>Here is an example for the merge function in Merge Sort, which merges two already sorted arrays. Note how the pattern match in the function arguments combined with the &lt;code>|&lt;/code> operator improves readability.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="kd">def&lt;/span> &lt;span class="n">merge&lt;/span>&lt;span class="p">([],&lt;/span> &lt;span class="n">list_b&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">list_b&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">list_a&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">head_a&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">rest_a&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">list_b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">head_b&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">rest_b&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">head_a&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">head_b&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">head_a&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rest_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">list_b&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">head_b&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rest_b&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="doing-more-with-guards">Doing more with Guards&lt;/h2>
&lt;p>Guard clauses restrict the the parameters when pattern matching in functions. Consider a function to check whether the elements in a given list doubles with every element.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir"> &lt;span class="kd">def&lt;/span> &lt;span class="n">is_doubling&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">tail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">]])&lt;/span> &lt;span class="ow">when&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">is_doubling&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tail&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">is_doubling&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">true&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">is_doubling&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In addition to matching on the function parameters, &lt;code>when x==2*y&lt;/code> should also be true for the function clause to match.&lt;/p>
&lt;p>Consider the following example for checking of valid parantheses.
The &lt;code>&amp;lt;&amp;lt;&amp;quot;(&amp;quot;, rest::binary&amp;gt;&amp;gt;&lt;/code> format allows for us to pattern match on strings, where the end of the string is allowed to be of variable length and is stored in &lt;code>rest&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="kd">def&lt;/span> &lt;span class="n">is_balanced&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">is_balanced&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">is_balanced&lt;/span>&lt;span class="p">(&amp;lt;&amp;lt;&lt;/span>&lt;span class="s2">&amp;#34;(&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rest&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">binary&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;,&lt;/span> &lt;span class="n">open_count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">close_count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">is_balanced&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">open_count&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">close_count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">is_balanced&lt;/span>&lt;span class="p">(&amp;lt;&amp;lt;&lt;/span>&lt;span class="s2">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rest&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">binary&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;,&lt;/span>
&lt;span class="n">open_count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">close_count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ow">when&lt;/span> &lt;span class="n">close_count&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">open_count&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="n">is_balanced&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">open_count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">close_count&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">end&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">is_balanced&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">true&lt;/span>
&lt;span class="kd">def&lt;/span> &lt;span class="n">is_balanced&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="ss">do&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>All in all, pattern matching is a very useful feature enhancing the readability.&lt;/p></description></item><item><title>Cross Site Requests Forgery: Comic Tutorial</title><link>https://rizasal.github.io/posts/2021-03-10-csrf/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2021-03-10-csrf/</guid><description>&lt;img src="https://rizasal.github.io/posts/2021-03-10-csrf/images/1.png" alt="Featured image of post Cross Site Requests Forgery: Comic Tutorial" />&lt;p>&lt;figure>&lt;img src="images/1.png" width="100%"/>
&lt;/figure>
&lt;figure>&lt;img src="images/2.png" width="100%"/>
&lt;/figure>
&lt;figure>&lt;img src="images/3.png" width="100%"/>
&lt;/figure>
&lt;/p></description></item><item><title>Bloom Filters</title><link>https://rizasal.github.io/posts/2021-02-02-bloom_filter/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2021-02-02-bloom_filter/</guid><description>&lt;img src="https://rizasal.github.io/posts/2021-02-02-bloom_filter/images/featured.png" alt="Featured image of post Bloom Filters" />&lt;p>&lt;figure>&lt;img src="images/1.png" width="100%"/>
&lt;/figure>
&lt;figure>&lt;img src="images/2.png" width="100%"/>
&lt;/figure>
&lt;figure>&lt;img src="images/3.png" width="100%"/>
&lt;/figure>
&lt;/p></description></item><item><title>Representing a Chess Board</title><link>https://rizasal.github.io/posts/2020-08-10-chess/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2020-08-10-chess/</guid><description>&lt;img src="https://rizasal.github.io/posts/2020-08-10-chess/images/chess_1.png" alt="Featured image of post Representing a Chess Board" />&lt;p>Making a game of chess is a daunting task. Especially if it is to be online and multiplayer.
It is not feasible to send the entire board object around and we need a way to send individual piece movements.&lt;/p>
&lt;p>One of the ways to do that is the Forsynth-Edwards Notation aka FEN string. A beautiful way to represent the board in a one line ASCII string. It is widely used to record chess games and start from different initial positions
or even the middle of a game.&lt;/p>
&lt;p>For those who are more interested in programming chess rather than playing it, The columns are represented by alphabets (a-h) and is called a &amp;lsquo;File&amp;rsquo;. The rows are represented by digits (1-8) and is called a &amp;lsquo;Rank&amp;rsquo;.&lt;/p>
&lt;figure>&lt;img src="https://rizasal.github.io/chess/chess_1.png"/>&lt;figcaption>
&lt;h4>Starting Position of the Chess Board&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Below is the entire FEN for the starting position of the chess board.&lt;/p>
&lt;blockquote>
&lt;p>rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&lt;/p>
&lt;/blockquote>
&lt;p>Cool right. No large objects to pass around the internet. Yay.
Let me start by explaining what each of these alphabets and digits stand for.&lt;/p>
&lt;p>The lowercase letters represent the black pieces and the uppercase ones represent the white pieces.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">R - rook, Q - Queen, K - King, B - Bishop, N - Knight, P - pawn
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The grammar for the FEN notation is as follows. There&amp;rsquo;s 6 parts to the FEN string, each separated by spaces.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;Piece Placement&amp;gt; &amp;lt;Side to move&amp;gt; &amp;lt;Castling ability&amp;gt;
&amp;lt;En passant target square&amp;gt; &amp;lt;Halfmove clock&amp;gt; &amp;lt;Fullmove counter&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="piece-placement">Piece Placement&lt;/h2>
&lt;p>Let&amp;rsquo;s look at the first part of the initial position string again.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR - Piece Placement Part
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The first portion of this string represents the 8th row of the chess board, aka rank8 , the next portion being the row with all pawns which is rank 7 and so on with each portion separated by a &amp;lsquo;/&amp;rsquo;. The digit 8 represents a completely empty row.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&amp;lt;Piece Placement&amp;gt; ::= &amp;lt;rank8&amp;gt;&amp;#39;/&amp;#39;&amp;lt;rank7&amp;gt;&amp;#39;/&amp;#39;...&amp;#39;/&amp;#39;&amp;lt;rank1&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="representing-a-rank-aka-row">Representing A Rank aka Row&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&amp;lt;rank&amp;gt; ::= [Any digit btw 1-7] &amp;lt;Any piece&amp;gt; [Any digit btw 1-7]
or
&amp;lt;rank&amp;gt; ::= &amp;#39;8&amp;#39;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Any of the three fields in the first definition of rank can be left empty. The digits stand for empty spaces. So a 2 would mean two consecutive squares are left blank. If the rank starts with a piece it means that the piece is placed at the first column aka File. A digit, say n, followed by a piece, say p, denotes n blank columns and then a black pawn(&amp;lsquo;p&amp;rsquo; stands for pawn).&lt;/p>
&lt;p>The digit piece combo can be repeated as many times.
/4pp2/ means 4 empty columns, two black pawns and then 2 empty spaces
If the rank is 8, then it stands for a completely empty row with no pieces.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">8/8/8/4pp2/8/8/8/8
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Would result in&lt;/p>
&lt;figure>&lt;img src="https://rizasal.github.io/chess/chess_2.png"/>&lt;figcaption>
&lt;h4>Top 3 rows are represented by 8/8/8. The next row(rank 5) is represented by 4pp2&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;!-- raw HTML omitted -->
&lt;h2 id="side-to-move">Side To Move&lt;/h2>
&lt;p>The next part in the FEN string is the side to move part could be one of either &amp;lsquo;w&amp;rsquo; (white) or &amp;lsquo;b&amp;rsquo; (black) indicating whose turn is next.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="castling-ability">Castling ability&lt;/h2>
&lt;p>&lt;em>The Castling Rights specify whether both sides are principally able to castle king- or queen side, now or later during the game - whether the involved pieces have already moved or in case of the rooks, were captured&lt;/em>&lt;/p>
&lt;p>Castling ability represents the &lt;a class="link" href="https://medium.com/r/?url=https%3A%2F%2Fwww.chessprogramming.org%2FCastling_Rights" target="_blank" rel="noopener"
>castling rights&lt;/a>, which does not actually mean whether a castle is possible right now or not but indicates whether the player lost the castling rights during the game so far.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">K - King side White Castling, Q - Queen side white castling,
k - King side black Castling , q - queen side black castling.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If the castling right is lost, it is represented by a &amp;lsquo;-&amp;rsquo;.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="en-passant">En-Passant&lt;/h2>
&lt;p>En passant is a special pawn capture move that make programming chess especially difficult, making us require a special field for it in our FEN string.&lt;/p>
&lt;figure>&lt;a href="https://commons.wikimedia.org/wiki/File:En_passant.gif">&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/En_passant.gif/512px-En_passant.gif" width="512"/>&lt;/a>&lt;figcaption>
&lt;h4>En-passant Move&lt;/h4>&lt;p>
&lt;a href="https://commons.wikimedia.org/wiki/File:En_passant.gif">Calusarul / CC BY-SA&lt;/a>&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&amp;lt;En passant target square&amp;gt; ::= &amp;#39;-&amp;#39; | &amp;lt;epsquare&amp;gt;
&amp;lt;epsquare&amp;gt; ::= &amp;lt;fileLetter&amp;gt; &amp;lt;eprank&amp;gt;
&amp;lt;fileLetter&amp;gt; ::= &amp;#39;a&amp;#39; | &amp;#39;b&amp;#39; | &amp;#39;c&amp;#39; | &amp;#39;d&amp;#39; | &amp;#39;e&amp;#39; | &amp;#39;f&amp;#39; | &amp;#39;g&amp;#39; | &amp;#39;h&amp;#39;
&amp;lt;eprank&amp;gt; ::= &amp;#39;3&amp;#39; | &amp;#39;6&amp;#39; (The two ranks where en-passant is possible)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The en-passant part of the FEN string is set to &amp;lsquo;-&amp;rsquo; if the previous move is not a double push of a pawn (Movement of two squares from the starting position). If it is, regardless of whether en-passant is possible or not, it is set to the rank just below (above for black) the pawn that was double pushed, indicating that an en passant move to that square is possible.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="half-move-clock">Half Move Clock&lt;/h2>
&lt;p>Unless there is a pawn move or a capture, this counter is incremented. When it hits fifty, the game is called a draw (&lt;a class="link" href="https://en.wikipedia.org/wiki/Fifty-move_rule" target="_blank" rel="noopener"
>Fifty Move Rule&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="full-move-counter">Full Move Counter&lt;/h2>
&lt;p>It starts at 1, and is incremented each time Black moves.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Thus we have it, A complete chess board representation in FEN.&lt;/p></description></item></channel></rss>