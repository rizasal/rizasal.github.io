<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pattern-Matching on Riza Sal</title><link>https://rizasal.github.io/tags/pattern-matching/</link><description>Recent content in Pattern-Matching on Riza Sal</description><generator>Hugo</generator><language>en-us</language><copyright>Â© Riza S</copyright><lastBuildDate>Thu, 19 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://rizasal.github.io/tags/pattern-matching/index.xml" rel="self" type="application/rss+xml"/><item><title>Cleaner flows with Pattern Matching in Elixir</title><link>https://rizasal.github.io/posts/2022-05-19-pattern-match/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2022-05-19-pattern-match/</guid><description>&lt;p>Pattern matching is a powerful feature of most Functional Programming languages and allows for a huge improvement in readability.
At it&amp;rsquo;s core, pattern match in Elixir relies on the match operator, the = sign. It tries to match the right hand side with the left hand side.&lt;/p>
&lt;blockquote>
&lt;p>What difference would this have with the == or the === sign that many other languages have?&lt;/p>
&lt;/blockquote>
&lt;p>The match operator allows you to bind variables in addition to checking for a match. Let&amp;rsquo;s understand this through an example&lt;/p></description></item></channel></rss>