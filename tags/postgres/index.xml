<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>postgres on Riza S</title><link>https://rizasal.github.io/tags/postgres/</link><description>Recent content in postgres on Riza S</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://rizasal.github.io/tags/postgres/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL Explain Statement</title><link>https://rizasal.github.io/posts/2023-02-19-postgres-explain/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2023-02-19-postgres-explain/</guid><description>&lt;img src="https://rizasal.github.io/posts/2023-02-19-postgres-explain/images/postgres.png" alt="Featured image of post PostgreSQL Explain Statement" />&lt;p>Ever had an SQL query running slow? Is the database really using your index to speed up the query? Using the &lt;code>EXPLAIN&lt;/code> command will allow you to look into the query execution, and figure out how the query is being resolved, and what steps, indexes, tables are used, and any filtering that may take place. This information is called the &lt;code>query plan&lt;/code>. The &lt;code>EXPLAIN&lt;/code> command allows us to view the query plan for any particular query.&lt;/p>
&lt;p>It is helpful to know some of the terms related to storage inside PostgreSQL.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Heap/Heap file:&lt;/strong> Storage area for storing the rows of the table. This is divided
into multiple pages and each page size is by default 8KB. Within each page, there contains a pointer which points to the location of the final data.&lt;/li>
&lt;li>&lt;strong>Index Storage:&lt;/strong> This stores only key values i.e. column values contained by
index.&lt;/li>
&lt;li>&lt;strong>Tuple Identifier (TID):&lt;/strong> A tuple is the internal representation of a row in Postgres. The TID represents where the tuple resides in the storage. The first part is the page number and remaining is the tuple index inside the page.&lt;/li>
&lt;/ul>
&lt;h2 id="stages-of-a-query">Stages of a Query&lt;/h2>
&lt;figure>&lt;img src="images/POSTGRES_QUERY_STAGES.png" width="90%"/>
&lt;/figure>
&lt;p>The Parser creates the &lt;a class="link" href="https://www.postgresql.org/docs/current/parser-stage.html" target="_blank" rel="noopener"
>Parse Tree&lt;/a>, after which the Rewrite system rewrites it in a way which the planner stage can use. The query plan generated by the Planner Stage is a tree of &lt;code>plan_nodes&lt;/code>&lt;/p>
&lt;figure>&lt;img src="images/POSTGRES_QUERY_STAGES%282%29.png" width="70%"/>
&lt;/figure>
&lt;p>A &lt;code>plan node&lt;/code> describes a single step that the database will take to execute the query.&lt;/p>
&lt;p>Each plan node corresponds to a specific operation in the query execution plan, such as scanning a table, joining two tables, or filtering rows based on a condition. Plan nodes are organized into a tree structure, with each node representing a single step in the plan, and child nodes representing the sub-steps that make up that step.&lt;/p>
&lt;h2 id="types-of-plan-nodes">Types of Plan nodes&lt;/h2>
&lt;p>Listing some of the common Node types:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Seq Scan:
&lt;figure>&lt;img src="images/Seq_Scan.jpg" width="60%"/>
&lt;/figure>
A sequential scan of a table. This is the most basic type of plan node and is used when no indexes are available for the query. It scans the entire table, row by row, to find the required data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parallel Scan: Sequential scan, but done in parallel. The number of parallel workers can be configured, to utilize all CPU cores.
&lt;figure>&lt;img src="images/Parallel_Scan.jpg" width="70%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Index Scan: A scan of an index. This plan node is used when an index is available for the query and can be used to speed up the query execution.
&lt;figure>&lt;img src="images/Index_Scan.jpg" width="60%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Index Only Scan: All the data required for the query can be found in the index itself and data from the table is not required.
&lt;figure>&lt;img src="images/Index_Only_Scan.jpg" width="60%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bitmap Index Scan: A scan of a bitmap index. This plan node is used when a bitmap index is available for the query and can be used to speed up the query execution.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bitmap Heap Scan: Used in tandem with Bitmap Index scan. Reads the data from a bitmap and loads the rows. Using a normal index might cause random reads slowing down the query. The bitmap index scan is used to quickly find a set of rows that match a specific condition and the location of the rows on disk are fed into a “bitmap” data structure after which Bitmap heap scan is used to retrieve the data for those rows from the table. Multiple bitmaps can be merged using the bit-wise operations before pulling the data. The parameters used by the planner to calculate random read cost is default set to 4 times to that of a sequential read. The parameter &lt;a class="link" href="[https://postgresqlco.nf/doc/en/param/random_page_cost/]%28https://postgresqlco.nf/doc/en/param/random_page_cost/%29" >random_page_cost&lt;/a> can be tuned according to the system.
&lt;figure>&lt;img src="images/Bitmap_Scan.jpg" width="60%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hash Join: A join operation that uses a hash table. First table is scanned sequentially and a hash table is built on the key that is used for the join. Second table is then sequentially scanned and each row pair is matched using the hash table. Even though the initial overhead is present for building the hash table, the speed of the using the hash table makes up for it. This will be only used if the hash table fits in the memory.
&lt;figure>&lt;img src="images/Hash_Join.jpg" width="60%"/>
&lt;/figure>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nested Loop Join: Used when the query requires joining two tables together and one of the tables is small enough to be stored in memory. Also used when no equality operators are present in the join condition.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Merge Join: Each relation is sorted on the join attributes before the join starts. Then the two relations are scanned in parallel, and matching rows are combined to form join rows. This is usually preferred when the tables are large and hash doesn’t fit in the memory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Aggregate: Calculates aggregate values such as sum, count, average, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Materialize: Used when the query requires intermediate results to be loaded into memory before the node above is executed.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="reading-the-explain-statement">Reading the explain statement&lt;/h2>
&lt;p>An example output of an explain statement&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_data&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">QUERY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PLAN&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-------------------------------------------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Seq&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Scan&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cost00020000">cost=0.00..200.00&lt;/h3>
&lt;p>The first number is the startup cost. It is the time taken for processing before the first row can be fetched. The cost is represented, not in actual time, but in units of &lt;code>disk page fetches&lt;/code>; that is, 1.0 equals one sequential disk page read. It is zero in this example, but if we add a sort operation to the same query,&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">desc&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">QUERY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PLAN&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-------------------------------------------------------------------
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Sort&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">690&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">711&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">8280&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Sort&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">Key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Seq&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Scan&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">table_1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cost&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">151&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">8280&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rows&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The cost at the upper level nodes will be inclusive of the cost of its children.
The &lt;code>Seq Scan&lt;/code> here does not require a startup cost, but the &lt;code>Sort&lt;/code> operation above would require the data be retrieved first from the sequential scan, thus explaining the higher startup cost.&lt;/p>
&lt;p>The second component is the &lt;code>Total Cost&lt;/code> it may take to complete.
The parameters used in calculating these costs can be tuned according to the hardware to ensure that the planner can make the best use of the resources available.&lt;/p>
&lt;h3 id="rows10000">rows=10000&lt;/h3>
&lt;p>This is the estimated rows the plan node will retrieve. It is not the number of rows processed or scanned by the plan node, but more of an estimate of the rows selected after applying any constraints. The top level nodes estimates will be closer to the number of rows actually returned by the query compared to the bottom nodes estimates.&lt;/p>
&lt;h3 id="width300">width=300&lt;/h3>
&lt;p>This is the estimated average width (in bytes) of rows output for the particular plan node&lt;/p></description></item></channel></rss>