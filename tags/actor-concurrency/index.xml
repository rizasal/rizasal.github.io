<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Actor-Concurrency on Riza Sal</title><link>https://rizasal.github.io/tags/actor-concurrency/</link><description>Recent content in Actor-Concurrency on Riza Sal</description><generator>Hugo</generator><language>en-us</language><copyright>Â© Riza S</copyright><lastBuildDate>Sat, 16 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://rizasal.github.io/tags/actor-concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Actor Concurrency Model, Message Passing and its Guarantees in Erlang/Elixir</title><link>https://rizasal.github.io/posts/2022-07-16-actor-concurrency/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://rizasal.github.io/posts/2022-07-16-actor-concurrency/</guid><description>&lt;h2 id="the-concept">The Concept&lt;/h2>
&lt;p>The actor concurrency model is a conceptual model where an actor represents the primitive unit of computation.
An Actor has 3 responsibilities:&lt;/p>
&lt;ul>
&lt;li>Communication&lt;/li>
&lt;li>Storage&lt;/li>
&lt;li>Processing&lt;/li>
&lt;/ul>
&lt;h3 id="communication">Communication&lt;/h3>
&lt;p>A single actor on its own makes no sense. Actors come in systems and communicate with each other using mailboxes. Each actor is associated with an address and everything in the system would be modeled using actors.&lt;/p>
&lt;h3 id="storage">Storage&lt;/h3>
&lt;p>An actor can have a private internal state. Each actor is completely isolated from each other since no actor can access the state of another. They can only communicate using messages.&lt;/p></description></item></channel></rss>