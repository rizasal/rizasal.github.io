[{"content":"Ever had an SQL query running slow? Is the database really using your index to speed up the query? Using the EXPLAIN command will allow you to look into the query execution, and figure out how the query is being resolved, and what steps, indexes, tables are used, and any filtering that may take place. This information is called the query plan. The EXPLAIN command allows us to view the query plan for any particular query.\nIt is helpful to know some of the terms related to storage inside PostgreSQL.\n Heap/Heap file: Storage area for storing the rows of the table. This is divided into multiple pages and each page size is by default 8KB. Within each page, there contains a pointer which points to the location of the final data. Index Storage: This stores only key values i.e. column values contained by index. Tuple Identifier (TID): A tuple is the internal representation of a row in Postgres. The TID represents where the tuple resides in the storage. The first part is the page number and remaining is the tuple index inside the page.  Stages of a Query  The Parser creates the Parse Tree, after which the Rewrite system rewrites it in a way which the planner stage can use. The query plan generated by the Planner Stage is a tree of plan_nodes\n A plan node describes a single step that the database will take to execute the query.\nEach plan node corresponds to a specific operation in the query execution plan, such as scanning a table, joining two tables, or filtering rows based on a condition. Plan nodes are organized into a tree structure, with each node representing a single step in the plan, and child nodes representing the sub-steps that make up that step.\nTypes of Plan nodes Listing some of the common Node types:\n  Seq Scan:  A sequential scan of a table. This is the most basic type of plan node and is used when no indexes are available for the query. It scans the entire table, row by row, to find the required data.\n  Parallel Scan: Sequential scan, but done in parallel. The number of parallel workers can be configured, to utilize all CPU cores.    Index Scan: A scan of an index. This plan node is used when an index is available for the query and can be used to speed up the query execution.    Index Only Scan: All the data required for the query can be found in the index itself and data from the table is not required.    Bitmap Index Scan: A scan of a bitmap index. This plan node is used when a bitmap index is available for the query and can be used to speed up the query execution.\n  Bitmap Heap Scan: Used in tandem with Bitmap Index scan. Reads the data from a bitmap and loads the rows. Using a normal index might cause random reads slowing down the query. The bitmap index scan is used to quickly find a set of rows that match a specific condition and the location of the rows on disk are fed into a ‚Äúbitmap‚Äù data structure after which Bitmap heap scan is used to retrieve the data for those rows from the table. Multiple bitmaps can be merged using the bit-wise operations before pulling the data. The parameters used by the planner to calculate random read cost is default set to 4 times to that of a sequential read. The parameter random_page_cost can be tuned according to the system.    Hash Join: A join operation that uses a hash table. First table is scanned sequentially and a hash table is built on the key that is used for the join. Second table is then sequentially scanned and each row pair is matched using the hash table. Even though the initial overhead is present for building the hash table, the speed of the using the hash table makes up for it. This will be only used if the hash table fits in the memory.    Nested Loop Join: Used when the query requires joining two tables together and one of the tables is small enough to be stored in memory. Also used when no equality operators are present in the join condition.\n  Merge Join: Each relation is sorted on the join attributes before the join starts. Then the two relations are scanned in parallel, and matching rows are combined to form join rows. This is usually preferred when the tables are large and hash doesn‚Äôt fit in the memory.\n  Aggregate: Calculates aggregate values such as sum, count, average, etc.\n  Materialize: Used when the query requires intermediate results to be loaded into memory before the node above is executed.\n  Reading the explain statement An example output of an explain statement\n1 2 3 4 5  EXPLAINSELECT*FROMuser_data;QUERYPLAN------------------------------------------------------------- SeqScanontable_1(cost=0.00..200.00rows=10000width=300)  cost=0.00..200.00 The first number is the startup cost. It is the time taken for processing before the first row can be fetched. The cost is represented, not in actual time, but in units of disk page fetches; that is, 1.0 equals one sequential disk page read. It is zero in this example, but if we add a sort operation to the same query,\n1 2 3 4 5 6 7 8  EXPLAINSELECT*FROMuser_dataorderbyemaildesc;QUERYPLAN------------------------------------------------------------------- Sort(cost=690.64..711.34rows=8280width=40)SortKey:emailDESC-\u0026gt;SeqScanontable_1(cost=0.00..151.80rows=8280width=40)(3rows)  The cost at the upper level nodes will be inclusive of the cost of its children. The Seq Scan here does not require a startup cost, but the Sort operation above would require the data be retrieved first from the sequential scan, thus explaining the higher startup cost.\nThe second component is the Total Cost it may take to complete. The parameters used in calculating these costs can be tuned according to the hardware to ensure that the planner can make the best use of the resources available.\nrows=10000 This is the estimated rows the plan node will retrieve. It is not the number of rows processed or scanned by the plan node, but more of an estimate of the rows selected after applying any constraints. The top level nodes estimates will be closer to the number of rows actually returned by the query compared to the bottom nodes estimates.\nwidth=300 This is the estimated average width (in bytes) of rows output for the particular plan node\n","date":"2023-02-19T00:00:00Z","image":"https://rizasal.github.io/posts/2023-02-19-postgres-explain/images/postgres_hu2cf5877129548b0cdc9e5afd900a50bb_118300_120x120_fill_box_smart1_3.png","permalink":"https://rizasal.github.io/posts/2023-02-19-postgres-explain/","title":"PostgreSQL Explain Statement"},{"content":"The Concept The actor concurrency model is a conceptual model where an actor represents the primitive unit of computation. An Actor has 3 responsibilities:\n Communication Storage Processing  Communication A single actor on its own makes no sense. Actors come in systems and communicate with each other using mailboxes. Each actor is associated with an address and everything in the system would be modeled using actors.\nStorage An actor can have a private internal state. Each actor is completely isolated from each other since no actor can access the state of another. They can only communicate using messages.\nProcessing An actor is allowed to do 3 things upon recieving a message\n Create more actors Send messages to other actors Setting the state for the next message  An example of an actor designating the state for the next message could be incrementing a counter on each message. Each message will be processed synchronously, and in the conceptual model, there is no guarantee on the ordering of messages.\nThe actor models falls nicely into a distributed system, as they are completely isolated and the messages can be passed across machines, via adresses.\nEvery message will be delivered utmost only once. The delivery of the message itself can be considered as \u0026ldquo;best efforts\u0026rdquo;. Everything else including how the the processes will communicate etc, is left out to the implementors. Let\u0026rsquo;s take a look at Erlang, which is modeled on the concept.\nErlang/Elixir \u0026quot;Message passing starts with a Process Identifier. If it exists, the message is inserted into its signal queue. The messages are always copied.\u0026quot; üîó\nErlang implements the actor concurrency model, and it\u0026rsquo;s worth looking into the message passing guarantees that it gives.\n Signals between two processes are guaranteed to arrive in the order they were sent.  This process is not the same as an operating system process. In Erlang, processes are lightweight and can be considered as actors It is important to note that if more than one process sends signals to a common process they can arrive in any order.\nConsider the following scenario:\n Process A sends [1,2,3] to Common Process C. Process B sends [4,5,6] to Common Process C.  The messages may be recieved by C as [1,2,4,5,6,3]. The messages sent from A to C will arrive in order they were sent.\nif an entity sends multiple signals to the same destination entity, the order is preserved; that is, if A sends a signal S1 to B, and later sends signal S2 to B, S1 is guaranteed not to arrive after S2. Note that S1 may, or may not have been lost. üîó\nThe actual delivery of a message is not guaranteed, only the order is.\nImplications Fault Tolerance Processes are completely isolated. One process going down does not affect any other part of the system since there is no shared state amongst any of them. Instead of trying to program defensively and trying to handle every single fault that could happen, we let the process crash, and let a supervising process know what happened.\nThe supervisor is responsible for knowing what to do when the process crashes, and can restart the process with known state, or handle the failure with grace. A supervisor itself may be supervised and this can go up all the way.\nDistributed Systems Since processes are completely isolated, it does not matter where the processes live, and could be distributed across networks. A process only needs to know the address it needs to send to, and everything else works the same.\nDeadlocks The actor model can still cause deadlocks. Process A and B can end up both waiting for messages from each other, creating a deadlock. Even though this is rare, one should keep this in mind when designing systems.\n https://www.youtube.com/watch?v=7erJ1DV_Tlo https://www.brianstorti.com/the-actor-model/ Interesting Read: https://keunwoo.com/notes/rebooting/  ","date":"2022-07-16T00:00:00Z","image":"https://rizasal.github.io/posts/2022-07-16-actor-concurrency/images/Erlang_logo_hue8809023e63696ff023dae6b529de093_73591_120x120_fill_q75_box_smart1.jpeg","permalink":"https://rizasal.github.io/posts/2022-07-16-actor-concurrency/","title":"Actor Concurrency Model, Message Passing and its Guarantees in Erlang/Elixir"},{"content":"Pattern matching is a powerful feature of most Functional Programming languages and allows for a huge improvement in readability. At it\u0026rsquo;s core, pattern match in Elixir relies on the match operator, the = sign. It tries to match the right hand side with the left hand side.\n What difference would this have with the == or the === sign that many other languages have?\n The match operator allows you to bind variables in addition to checking for a match. Let\u0026rsquo;s understand this through an example\n1 2 3 4 5  iex(1)\u0026gt; %{ first_name: \u0026#34;smith\u0026#34;, last_name: last_name } = %{ first_name: \u0026#34;smith\u0026#34;, last_name: \u0026#34;john\u0026#34;} %{first_name: \u0026#34;smith\u0026#34;, last_name: \u0026#34;john\u0026#34;} iex(2)\u0026gt; last_name \u0026#34;john\u0026#34;   Whenever a variable is present on the LHS of a match expression, the value of the expression will be assigned into the variable. In the above example, it will give a successful match on any name which has the first_name value as smith and it will bind the last_name (\u0026ldquo;john\u0026rdquo;) in the last_name variable. If the first_name does not match smith , it will raise a MatchError.\nPattern Match in Function Parameters Let\u0026rsquo;s start with an example\n1 2 3  def print(1), do: IO.puts(\u0026#34;one\u0026#34;) # print(1) =\u0026gt; \u0026#34;one\u0026#34; def print(2), do: IO.puts(\u0026#34;two\u0026#34;) # print(2) =\u0026gt; \u0026#34;two\u0026#34; def print(_n), do: IO.puts(\u0026#34;noop\u0026#34;) # print(3) =\u0026gt; \u0026#34;noop\u0026#34;   The above example has three implementations defined for print The overloaded print function will start pattern matching on the arguments with each definition until it finds a match or it would raise a FunctionClauseError Functions are matched for parameters from top to bottom in the order of definition\nLooking at a more complicated example,\n1 2 3  def transform(html, :italics), do: \u0026#34;\u0026lt;i\u0026gt; #{html}\u0026lt;/i\u0026gt;\u0026#34; def transform(html, :bold), do: \u0026#34;\u0026lt;b\u0026gt; #{html}\u0026lt;/b\u0026gt;\u0026#34; def transform(html, :strikethrough), do: \u0026#34;\u0026lt;s\u0026gt; #{html}\u0026lt;/s\u0026gt;\u0026#34;   Here the HTML can be transformed to add an italics/bold/strikethrough surrounding it, by changing the way we call transform with the second argument.\nYou could extract variables inside different types such as tuples, maps and lists using pattern matching in function parameters as well\n1 2 3 4 5 6 7 8 9 10 11 12  def switcheroo({x, y}), do: {y, x} # switcheroo({1,2}) =\u0026gt; {2, 1} def extract_name(%{name: name}), do: name # extract_name(%{name: \u0026#34;john\u0026#34;, ...}) =\u0026gt; \u0026#34;john\u0026#34; def extract_head([head | tail]), do: head # extract_head([1,2,3]) =\u0026gt; 1 def name_ends_with_john?(%{first_name: first_name, last_name: \u0026#34;john\u0026#34;}), do: true def name_ends_with_john?(_), do: false # name_ends_with_john(%{first_name: \u0026#34;smith\u0026#34;, last_name: \u0026#34;john\u0026#34;}) =\u0026gt; true   Cleaner flows with Pattern Matching Here is an example for the merge function in Merge Sort, which merges two already sorted arrays. Note how the pattern match in the function arguments combined with the | operator improves readability.\n1 2 3 4 5 6 7 8 9 10 11  def merge([], list_b), do: list_b def merge(list_a, []), do: list_a def merge(list_a = [head_a | rest_a], list_b = [head_b | rest_b]) do if head_a \u0026lt; head_b do [head_a | merge(rest_a, list_b)] else [head_b | merge(list_a, rest_b)] end end   Doing more with Guards Guard clauses restrict the the parameters when pattern matching in functions. Consider a function to check whether the elements in a given list doubles with every element.\n1 2 3  def is_doubling([x | tail = [y | _]]) when x == 2 * y, do: is_doubling(tail) def is_doubling([_]), do: true def is_doubling(_), do: false   In addition to matching on the function parameters, when x==2*y should also be true for the function clause to match.\nConsider the following example for checking of valid parantheses. The \u0026lt;\u0026lt;\u0026quot;(\u0026quot;, rest::binary\u0026gt;\u0026gt; format allows for us to pattern match on strings, where the end of the string is allowed to be of variable length and is stored in rest.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  def is_balanced(s), do: is_balanced(s, 0, 0) def is_balanced(\u0026lt;\u0026lt;\u0026#34;(\u0026#34;, rest::binary\u0026gt;\u0026gt;, open_count, close_count) do is_balanced(rest, open_count+1, close_count) end def is_balanced(\u0026lt;\u0026lt;\u0026#34;)\u0026#34;, rest::binary\u0026gt;\u0026gt;, open_count, close_count) when close_count \u0026lt; open_count do is_balanced(rest, open_count, close_count+1) end def is_balanced(\u0026#34;\u0026#34;, count, count), do: true def is_balanced(_, _, _), do: false   All in all, pattern matching is a very useful feature enhancing the readability.\n","date":"2022-05-19T00:00:00Z","image":"https://rizasal.github.io/posts/2022-05-19-pattern-match/images/preview_hucc6c1b37c55d8ab8ee1908c8c4775036_14434_120x120_fill_box_smart1_3.png","permalink":"https://rizasal.github.io/posts/2022-05-19-pattern-match/","title":"Cleaner flows with Pattern Matching in Elixir"},{"content":" ","date":"2021-03-15T00:00:00Z","image":"https://rizasal.github.io/posts/2021-03-15-quicksort/images/quicksort_huf3626d6a97ae8f1d17b71bd9ace3b41f_1541401_120x120_fill_box_smart1_3.png","permalink":"https://rizasal.github.io/posts/2021-03-15-quicksort/","title":"QuickSort: Comic Tutorial"},{"content":"   ","date":"2021-03-10T00:00:00Z","image":"https://rizasal.github.io/posts/2021-03-10-csrf/images/1_hu4338e8c47121a0387a7a138deb4871ff_741493_120x120_fill_box_smart1_3.png","permalink":"https://rizasal.github.io/posts/2021-03-10-csrf/","title":"Cross Site Requests Forgery: Comic Tutorial"},{"content":"   ","date":"2021-02-02T00:00:00Z","image":"https://rizasal.github.io/posts/2021-02-02-bloom_filter/images/featured_hu44b2b444943348784514569e2c5fd273_130160_120x120_fill_box_smart1_3.png","permalink":"https://rizasal.github.io/posts/2021-02-02-bloom_filter/","title":"Bloom Filters"},{"content":"Making a game of chess is a daunting task. Especially if it is to be online and multiplayer. It is not feasible to send the entire board object around and we need a way to send individual piece movements.\nOne of the ways to do that is the Forsynth-Edwards Notation aka FEN string. A beautiful way to represent the board in a one line ASCII string. It is widely used to record chess games and start from different initial positions or even the middle of a game.\nFor those who are more interested in programming chess rather than playing it, The columns are represented by alphabets (a-h) and is called a \u0026lsquo;File\u0026rsquo;. The rows are represented by digits (1-8) and is called a \u0026lsquo;Rank\u0026rsquo;.\n Starting Position of the Chess Board   Below is the entire FEN for the starting position of the chess board.\n rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\n Cool right. No large objects to pass around the internet. Yay. Let me start by explaining what each of these alphabets and digits stand for.\nThe lowercase letters represent the black pieces and the uppercase ones represent the white pieces.\n1  R‚Ää-‚Äärook, Q‚Ää-‚ÄäQueen, K‚Ää-‚ÄäKing, B‚Ää-‚ÄäBishop, N‚Ää-‚ÄäKnight, P‚Ää-‚Ääpawn   The grammar for the FEN notation is as follows. There\u0026rsquo;s 6 parts to the FEN string, each separated by spaces.\n1 2  \u0026lt;Piece Placement\u0026gt; \u0026lt;Side to move\u0026gt; \u0026lt;Castling ability\u0026gt; \u0026lt;En passant target square\u0026gt; \u0026lt;Halfmove clock\u0026gt; \u0026lt;Fullmove counter\u0026gt;   Piece Placement Let\u0026rsquo;s look at the first part of the initial position string again.\n1  rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR - Piece Placement Part   The first portion of this string represents the 8th row of the chess board, aka rank8 , the next portion being the row with all pawns which is rank 7 and so on with each portion separated by a \u0026lsquo;/\u0026rsquo;. The digit 8 represents a completely empty row.\n1  \u0026lt;Piece Placement\u0026gt; ::= \u0026lt;rank8\u0026gt;\u0026#39;/\u0026#39;\u0026lt;rank7\u0026gt;\u0026#39;/\u0026#39;...\u0026#39;/\u0026#39;\u0026lt;rank1\u0026gt;   Representing A Rank aka Row 1 2 3  \u0026lt;rank\u0026gt; ::= [Any digit btw 1-7] \u0026lt;Any piece\u0026gt; [Any digit btw 1-7] or \u0026lt;rank\u0026gt; ::= \u0026#39;8\u0026#39;   Any of the three fields in the first definition of rank can be left empty. The digits stand for empty spaces. So a 2 would mean two consecutive squares are left blank. If the rank starts with a piece it means that the piece is placed at the first column aka File. A digit, say n, followed by a piece, say p, denotes n blank columns and then a black pawn(\u0026lsquo;p\u0026rsquo; stands for pawn).\nThe digit piece combo can be repeated as many times. /4pp2/ means 4 empty columns, two black pawns and then 2 empty spaces If the rank is 8, then it stands for a completely empty row with no pieces.\n1  8/8/8/4pp2/8/8/8/8   Would result in\n Top 3 rows are represented by 8/8/8. The next row(rank 5) is represented by 4pp2   Side To Move The next part in the FEN string is the side to move part could be one of either \u0026lsquo;w\u0026rsquo; (white) or \u0026lsquo;b\u0026rsquo; (black) indicating whose turn is next.\n1  rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w   Castling ability The Castling Rights specify whether both sides are principally able to castle king- or queen side, now or later during the game - whether the involved pieces have already moved or in case of the rooks, were captured\nCastling ability represents the castling rights, which does not actually mean whether a castle is possible right now or not but indicates whether the player lost the castling rights during the game so far.\n1 2  K‚Ää-‚ÄäKing side White Castling, Q‚Ää-‚ÄäQueen side white castling, k‚Ää-‚ÄäKing side black Castling , q‚Ää-‚Ääqueen side black castling.   If the castling right is lost, it is represented by a \u0026lsquo;-\u0026rsquo;.\n1  rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq   En-Passant En passant is a special pawn capture move that make programming chess especially difficult, making us require a special field for it in our FEN string.\n En-passant Move Calusarul / CC BY-SA\n  1 2 3 4  \u0026lt;En passant target square\u0026gt; ::= \u0026#39;-\u0026#39; | \u0026lt;epsquare\u0026gt; \u0026lt;epsquare\u0026gt; ::= \u0026lt;fileLetter\u0026gt; \u0026lt;eprank\u0026gt; \u0026lt;fileLetter\u0026gt; ::= \u0026#39;a\u0026#39; | \u0026#39;b\u0026#39; | \u0026#39;c\u0026#39; | \u0026#39;d\u0026#39; | \u0026#39;e\u0026#39; | \u0026#39;f\u0026#39; | \u0026#39;g\u0026#39; | \u0026#39;h\u0026#39; \u0026lt;eprank\u0026gt; ::= \u0026#39;3\u0026#39; | \u0026#39;6\u0026#39; (The two ranks where en-passant is possible)   The en-passant part of the FEN string is set to \u0026lsquo;-\u0026rsquo; if the previous move is not a double push of a pawn (Movement of two squares from the starting position). If it is, regardless of whether en-passant is possible or not, it is set to the rank just below (above for black) the pawn that was double pushed, indicating that an en passant move to that square is possible.\n1  rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -   Half Move Clock Unless there is a pawn move or a capture, this counter is incremented. When it hits fifty, the game is called a draw (Fifty Move Rule).\n1  rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0   Full Move Counter It starts at 1, and is incremented each time Black moves.\n1  rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1   Thus we have it, A complete chess board representation in FEN.\n","date":"2020-08-10T00:00:00Z","image":"https://rizasal.github.io/posts/2020-08-10-chess/images/chess_1_hu9455be0d135e137d951dc520a9592fb2_54464_120x120_fill_box_smart1_3.png","permalink":"https://rizasal.github.io/posts/2020-08-10-chess/","title":"Representing a Chess Board"}]